<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Copyright (c) Members of the EGEE Collaboration. 2004-2008.
    See http://public.eu-egee.org/partners/ for details on 
    the copyright holders.
    For license conditions see the license file or
    http://www.apache.org/licenses/LICENSE-2.0

    Build file for the gLite Hydra Keystore.

    Authors: FROHNER Ákos <Akos.Frohner@cern.ch>
    		 Joni Hahkala <joni.hahkala@cern.ch>
-->
<project name="hydra-service" default="install">
    
    <!-- version numbers -->
    <property file="VERSION"/>

	<!-- force compilation to jdk1.5 compatibility -->
	
<!--	<property name="jdk.target.version.force" value="1.5" /> -->
    <!-- locations -->
    
	<property name="workspace.dir" value=".." />
	<property name="project-name" value="hydra-service" />
	<property name="jar.name" value="${project-name}" />

	<property name="stage" value="${workspace.dir}/stage" />
	<property name="stage.java.share.path" value="${stage}/usr/share/java" />
	<property name="system.java.share.path" value="/usr/share/java" />

	<property name="module.package.name" value="${project-name}" />
	<property name="prefix" value="tmp-prefix" />
	<property name="package.prefix" value="${prefix}" />
	<property name="package.javadoc.path" value="${package.prefix}/usr/share/doc/${module.package.name}/html" />
	<property name="package.doc.path" value="${package.prefix}/usr/share/doc/${module.package.name}" />
	<property name="package.java.share.path" value="${package.prefix}/usr/share/java" />
	<property name="package.templates.path" value="${package.prefix}/var/lib/${project-name}" />
	<property name="package.etc.path" value="${package.prefix}/etc/${project-name}" />

    <!-- using defaults, if no specific location is set -->
    <property name="log4j.location" value="${system.java.share.path}"/>
    <property name="bouncycastle.location" value="${system.java.share.path}"/>
    <property name="trustmanager.location" value="${stage.java.share.path}"/>
    <property name="trustmanager-axis.location" value="${stage.java.share.path}"/>
    <property name="voms-java.location" value="${stage.java.share.path}"/>
	<property name="tomcat.location" value="${system.java.share.path}"/>
    <property name="axis.location" value="${system.java.share.path}"/>
    <property name="junit.location" value="${system.java.share.path}"/>
	<property name="mm-mysql.location" value="${stage.java.share.path}"/>
	<property name="jug.location" value="${stage.java.share.path}"/>
	
    <property name="builddir" value="build"/>
    <property name="testdir" value="build/test"/>
    <property name="certdir" value="${stage}/share/test/certificates"/>

    <!-- dumping the most important locations for later use -->
    <target name="configure">
        <echo message="VERSION               =${VERSION}"/>
        <echo message="INTERFACE_VERSION     =${INTERFACE_VERSION}"/>
        <echo message="SCHEMA_VERSION        =${SCHEMA_VERSION}"/>
        <echo message="log4j.location                =${log4j.location}"/>
        <echo message="bouncycastle.location         =${bouncycastle.location}"/>
        <echo message="trustmanager.location         =${trustmanager.location}"/>
        <echo message="trustmanager-axis.location    =${trustmanager-axis.location}"/>
        <echo message="voms-java.location            =${voms-java.location}"/>
        <echo message="tomcat.location               =${tomcat.location}"/>
        <echo message="axis.location                 =${axis.location}"/>
        <echo message="mm-mysql.location             =${mm-mysql.location}"/>
        <echo message="jug.location                  =${jug.location}"/>
        <echo message="stage                 		 =${stage}"/>
        <echo message="stage.java.share.path         =${stage.java.share.path}"/>
        <echo message="system.java.share.path        =${system.java.share.path}"/>
    </target>

    <!-- for Java code generation from a WSDL -->
    <taskdef resource="axis-tasks.properties">
        <classpath>
            <fileset dir="${axis.location}/">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>

    <path id="compile.classpath">
        <fileset dir="${log4j.location}">
            <include name="**/log4j*.jar"/>
        </fileset>
        <fileset dir="${axis.location}/">
            <include name="**/axis*.jar"/>
            <include name="**/jaxrpc*.jar"/>
        </fileset>
        <fileset dir="${tomcat.location}/">
        	<include name="**/*dbcp*.jar"/>
            <include name="**/*servlet*-api*.jar"/>        	
        </fileset>
        <fileset dir="${trustmanager.location}/">
            <include name="**/trustmanager.jar"/>
       </fileset>
        <fileset dir="${trustmanager-axis.location}/">
            <include name="**/trustmanager-axis.jar"/>
       </fileset>
        <fileset dir="${voms-java.location}/">
            <include name="**/vomsjapi.jar"/>
        </fileset>
        <fileset dir="${bouncycastle.location}/">
            <include name="**/bcprov.jar"/>
        </fileset>
<!--        <fileset dir="${mm-mysql.location}/">
            <include name="**/mysql*.jar"/>
        </fileset> 
        <fileset dir="${jug.location}/">
            <include name="**/bcprov.jar"/>
        </fileset> -->
        <pathelement location="${builddir}/soap/classes"/>
    </path>

    <filterset id="module.filters">
        <filter token="VERSION" value="${VERSION}"/>
        <filter token="INTERFACE_VERSION" value="${INTERFACE_VERSION}"/>
    </filterset>

    <target name="init" depends="configure">
        <mkdir dir="${builddir}"/>
        <mkdir dir="${builddir}/classes"/>
        <mkdir dir="${builddir}/soap/src"/>
        <mkdir dir="${builddir}/soap/classes"/>
    </target>

    <target name="clean">
        <delete dir="${builddir}"/>
        <delete dir="${package.prefix}"/>
        <delete dir="${testdir}"/>
    	<delete dir="lib"/>
    </target>

    <target name="webapp.soap.generate.check" depends="init">
        <uptodate property="webapp.soap.generate.skip"
            srcfile="interface/wsdl/org.glite.data-metadata-${INTERFACE_VERSION}.wsdl"
            targetfile="${builddir}/soap/src/org/glite/data/hydra/MetadataCatalog.java"/>
    </target>
    <target name="webapp.soap.generate" 
        depends="init,webapp.soap.generate.check"
        unless="webapp.soap.generate.skip">
        <axis-wsdl2java url="interface/wsdl/org.glite.data-metadata-${INTERFACE_VERSION}.wsdl"
            testcase="false" verbose="true" serverside="true"
            skeletondeploy="true" deployscope="Application"
            output="${builddir}/soap/src">
            <mapping
                namespace="http://glite.org/wsdl/services/org.glite.data.catalog"
                package="org.glite.data.catalog.service"/>
            <mapping
                namespace="http://glite.org/wsdl/services/org.glite.data.catalog.service.meta"
                package="org.glite.data.hydra"/>
        </axis-wsdl2java>
    </target>

    <target name="webapp.wsdd" depends="init, webapp.soap.generate">
        <xslt style="${basedir}/project/split-deploy-wsdd.xsl" 
            in="${builddir}/soap/src/org/glite/data/hydra/deploy.wsdd"
            out="${builddir}/soap/src/org/glite/data/hydra/deploy.wsdd.service"/>
        <concat destfile="${builddir}/webapp/WEB-INF/server-config.wsdd">
            <header filtering="false" file="project/server-config.wsdd.header"/>
            <footer filtering="false" file="project/server-config.wsdd.footer"/>
            <fileset dir="${builddir}/soap/src" includes="**/deploy.wsdd.service"/>
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="&lt;\?xml.*\?&gt;" replace=""/>
                    <replaceregex 
                        pattern="name=\&quot;MetadataCatalog\&quot;" 
                        replace="name=\&quot;Hydra\&quot;"/>
                </tokenfilter>
            </filterchain>
        </concat>
    </target>

    <target name="webapp.soap.fixsrc.check" depends="init">
        <uptodate property="webapp.soap.fixsrc.skip">
            <srcfiles dir="${builddir}/soap/src" includes="**/*Exception.java"/>
            <mapper type="glob" from="*.java" to="*.java.orig"/>
        </uptodate>
    </target>
    <target name="webapp.soap.fixsrc" 
        depends="webapp.soap.generate,webapp.soap.fixsrc.check"
        unless="webapp.soap.fixsrc.skip"
        description="Fixes the generated exception code to make it work with gSOAP">
        <!-- save the patched files -->
        <copy toDir="${builddir}/soap/src">
            <fileset dir="${builddir}/soap/src" includes="**/*Exception.java"/>
            <mapper type="glob" from="*.java" to="*.java.orig"/>
        </copy>
        
        <!-- do the patching back to the original filenames -->
        <copy toDir="${builddir}/soap/src" overwrite="true">
            <fileset dir="${builddir}/soap/src" includes="**/*Exception.java.orig"/>
            <mapper type="glob" from="*.java.orig" to="*.java"/>
            <filterchain>
                <tokenfilter>
                    <replacestring 
                        from="context.serialize(qname, null, this);" 
                        to="context.serialize(getTypeDesc().getXmlType(), null, this);"/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>

    <target name="webapp.soap.compile" 
        depends="init, webapp.soap.generate, webapp.soap.fixsrc">
        <javac srcdir="${builddir}/soap/src" 
               destdir="${builddir}/soap/classes"
               debug="true"
               deprecation="true">
            <classpath refid="compile.classpath"/>
            <exclude name="**/*Impl.java"/>
        </javac>

        <!-- 
           for GUI users that the generated source will not overlap
           the class with the same name in the src directory
          -->
        <delete>
            <fileset dir="${builddir}/soap/src" includes="**/*Impl.java"/>
        </delete>
    </target>

    <target name="compile" depends="init, webapp.soap.compile">
        <javac srcdir="src" 
               destdir="${builddir}/classes"
               debug="true"
               deprecation="true">
				<classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="webapp" depends="init, compile, webapp.wsdd">
        <mkdir dir="${builddir}/webapp/WEB-INF/lib"/>
        <mkdir dir="${builddir}/webapp/WEB-INF/classes"/>

        <!-- make it look good ... -->
        <copy toDir="${builddir}/webapp">
            <fileset dir="config/web" includes="*.html, *.css, *.jsp, *.js"/>
            <filterset refid="module.filters"/>
        </copy>
        <copy toDir="${builddir}/webapp">
            <fileset dir="config/web" includes="*.jpg, *.png"/>
        </copy>

        <!-- servlet and axis service configuration -->
        <copy toDir="${builddir}/webapp/WEB-INF">
            <fileset dir="config" includes="web.xml"/>
        </copy>

        <!-- dependencies -->
        <copy toDir="${builddir}/webapp/WEB-INF/lib" flatten="true">
            <fileset dir="${axis.location}/">
                <include name="**/axis*.jar"/>
                <include name="**/jaxrpc*.jar"/>
            </fileset>
            <fileset dir="${trustmanager.location}">
                <include name="trustmanager.jar"/>
            </fileset>
            <fileset dir="${trustmanager-axis.location}">
                <include name="trustmanager-axis.jar"/>
            </fileset>
            <fileset dir="${bouncycastle.location}">
                <include name="bcprov*.jar"/>
            </fileset>
<!--            <fileset dir="${jug.location}">
                <include name="**/jug.jar"/>
            </fileset>-->
        </copy>

        <!-- implemenetation -->
        <copy toDir="${builddir}/webapp/WEB-INF/classes">
            <fileset dir="${builddir}/soap/classes">
                <exclude name="**/*Impl*"/>
                <exclude name="**/*Stub*"/>
                <exclude name="**/*Service.class"/>
                <exclude name="**/*ServiceLocator.class"/>
            </fileset>
            <fileset dir="${builddir}/classes"/>
        </copy>

        <!-- version information -->
        <copy 
            file="${basedir}/VERSION"
            tofile="${builddir}/webapp/WEB-INF/classes/version.properties" 
            overwrite="true"/>
        <echo file="${builddir}/webapp/WEB-INF/classes/version.properties" append="true"
            message="module.release=${RELEASE}${line.separator}"/>
        <echo file="${builddir}/webapp/WEB-INF/classes/version.properties" append="true"
            message="feature.string=glite-data-hydra-service-${VERSION}-${RELEASE}${line.separator}"/>
    </target>

    <target name="webapp.war" depends="init, webapp">
        <mkdir dir="${builddir}/share/java"/>
        <war destfile="${builddir}/share/java/${jar.name}.war"
            webxml="${builddir}/webapp/WEB-INF/web.xml" update="true">
            <fileset dir="${builddir}/webapp" excludes="**/WEB-INF/**"/>
            <lib dir="${builddir}/webapp/WEB-INF/lib"/>
            <classes dir="${builddir}/webapp/WEB-INF/classes"/>
            <webinf dir="${builddir}/webapp/WEB-INF" includes="server-config.wsdd"/>
        </war>
    </target>
	
	<target name="jar" depends="webapp">
		<mkdir dir="lib"/>
		<jar destfile="lib/${jar.name}.jar" basedir="${builddir}/webapp/WEB-INF/classes"
		     includes="**/*.*"/>
	</target>

    <target name="webapp.doc.check" depends="init">
        <uptodate  property="webapp.doc.skip"
            targetfile="${builddir}/doc/index.html">
            <srcfiles dir="src" includes="**/*.java, **/*.html"/>
        </uptodate>
    </target>
    <target name="webapp.doc" depends="init" unless="webapp.doc.skip">
        <mkdir dir="${builddir}/doc"/>
        <javadoc
            sourcepath="src"
            packagenames="org.glite.data.*"
            excludepackagenames="org.glite.data.*.log"
            destdir="${builddir}/doc"
            windowtitle="glite-data-hydra"
            breakiterator="yes">
            <tag name="stereotype" scope="all" description="Stereotype:"/>
            <bottom><![CDATA[<i>Copyright &#169; 2004-2007. <A href="http://public.eu-egee.org/">EU-EGEE</A></i>]]></bottom>
            <doctitle><![CDATA[<h1>gLite Data Management Services</h1>]]></doctitle>
        </javadoc>
    </target>


    <target name="install" depends="init,webapp.war,jar">

		<mkdir dir="${package.java.share.path}" />

		<copy toDir="${package.java.share.path}">
			<fileset dir="${builddir}/share/java">
				<include name="*.war" />
			</fileset>
		</copy>
	
		<mkdir dir="${package.doc.path}" />
		<copy toDir="${package.doc.path}">
			<fileset dir=".">
				<include name="LICENSE" />
				<include name="RELEASE-NOTES" />
				<include name="VERSION" />
			</fileset>
		</copy>
        <mkdir dir="${package.etc.path}"/>
		<copy todir="${package.etc.path}">
			<fileset dir="config">
				<include name="context.template.xml" />
                <include name="log4j.template.properties"/>
                <include name="schema/mysql/*.sql"/>
                <include name="schema/mysql/README"/>
			</fileset>
		</copy>
		<copy file="config/config.properties"
              tofile="${package.etc.path}/config.properties.example"/>
		<copy todir="${package.etc.path}">
			<fileset dir="config">
				<include name="info-provider" />
                <include name="configure"/>
			</fileset>
            <filterset refid="module.filters"/>
		</copy>
        <chmod file="${package.etc.path}/configure" perm="ugo+rx"/>
        <chmod file="${package.etc.path}/info-provider" perm="ugo+rx"/>
    </target>
	
	<target name="stage" depends="install">
		<mkdir dir="${stage}"/>
		<copy todir="${stage}">
			<fileset dir="${package.prefix}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${stage.java.share.path}" file="lib/${jar.name}.jar"/>
	</target>
			

    <target name="tar">
        <antcall target="install">
			<param name="package.prefix" value="${builddir}/tar"/>
		</antcall>
        <mkdir dir="tgz"/>
        <exec executable="tar" dir="${builddir}/tar">
            <arg line="-czf tgz/${NAME}-${VERSION}.tar.gz ." />
        </exec>
    </target>



    <!-- ================================================================= -->
    <!-- Testing Targets                                                   -->
    <!-- These are normall not used in the builds and require extra        -->
    <!-- dependencies, like org.glite.data.test-utils and voms-clients     -->
    <!-- ================================================================= -->

    <available property="certs.available" file="${builddir}/certs"/>
    <target name="certs.generate" depends="init" unless="certs.available">
        <mkdir dir="${builddir}/certs"/>
        <exec dir="${builddir}/certs"
            executable="${glite.location}/share/test/utils/glite-test-certs">
            <arg value="--verbose"/>
            <arg value="--some"/>
            <arg value="--env"/>
            <arg value="--system"/>
        </exec>
    </target>
    <target name="certs.remove" if="certs.available">
        <delete dir="${builddir}/certs"/>
    </target>

    <property name="tomcat.testdir" value="${builddir}/tomcat"/>
    <available property="tomcat.configured" file="${tomcat.testdir}/server"/>
    <target name="tomcat.configure" 
        depends="init,certs.generate" 
        unless="tomcat.configured">

        <mkdir dir="${tomcat.testdir}/logs"/>
        <mkdir dir="${tomcat.testdir}/temp"/>
        <mkdir dir="${tomcat.testdir}/work"/>

        <copy toDir="${tomcat.testdir}/bin">
            <fileset dir="${tomcat.location}/bin"/>
        </copy>
        <chmod dir="${tomcat.testdir}/bin" includes="*.sh" perm="ugo+rx"/>

        <copy toDir="${tomcat.testdir}/shared">
            <fileset dir="${tomcat.location}/shared"/>
        </copy>
        <copy toDir="${tomcat.testdir}/common">
            <fileset dir="${tomcat.location}/common"/>
        </copy>
        <copy toDir="${tomcat.testdir}/server">
            <fileset dir="${tomcat.location}/server"/>
        </copy>
        <copy toDir="${tomcat.testdir}/conf">
            <fileset dir="${tomcat.location}/conf"/>
        </copy>

        <move file="${tomcat.testdir}/conf/server.xml"
            tofile="${tomcat.testdir}/conf/server-original.xml"/>

        <copy file="test/server.template.xml" 
            toFile="${tomcat.testdir}/conf/server.xml" overwrite="true">
            <filterset>
                <filter token="PORT" value="8443"/>
                <filter token="CAFILES" value="${builddir}/certs/grid-security/certificates/*.0"/>
                <filter token="CRLFILES" value="${builddir}/certs/grid-security/certificates/*.r0"/>
                <filter token="SSLCERTFILE" value="${builddir}/certs/grid-security/hostcert.pem"/>
                <filter token="SSLKEY" value="${builddir}/certs/grid-security/hostkey.pem"/>
                <filter token="LOG4JCONF" value="test/log4j-trustmanager.properties"/> 
            </filterset>
        </copy>

        <copy toDir="${tomcat.testdir}/server/lib" flatten="true">
            <fileset dir="${util-java.location}/share/java">
                <include name="trustmanager-axis.jar"/>
                <include name="trustmanager.jar"/>
            </fileset>
            <fileset dir="${bcprov.location}/jars">
                <include name="bcprov*.jar"/>
            </fileset>
            <fileset dir="${log4j.location}">
                <include name="**/log4j*.jar"/>
            </fileset>
        </copy>

        <copy toDir="${tomcat.testdir}/common/lib" flatten="true">
            <fileset dir="${mm-mysql.location}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <copy toDir="${tomcat.testdir}/webapps">
            <fileset dir="${tomcat.location}/webapps" includes="ROOT/**"/>
        </copy>
    </target>
    <target name="tomcat.unconfigure" depends="certs.remove">
        <delete dir="${tomcat.testdir}"/>
    </target>

    <target name="tomcat.restart" depends="tomcat.stop,tomcat.start"
        description="restarting the application container"/>
    <target name="tomcat.stop" depends="tomcat.configure"
        description="stopping the application container">
         <echo message="Stopping tomcat server"/>
         <exec dir="${tomcat.testdir}/bin/" executable="catalina.sh" resolveexecutable="true">
            <arg line="stop"/>
         </exec>
    </target>
    <target name="tomcat.start" depends="tomcat.configure"
        description="starting the application container">
         <echo message="Starting tomcat server"/>
         <exec dir="${tomcat.testdir}/bin/" executable="catalina.sh" resolveexecutable="true">
            <arg line="jpda"/>
            <arg line="start"/>
         </exec>
    </target>

    <target name="test.configure" depends="webapp,certs.generate,tomcat.configure">
        <exec dir="${builddir}" executable="config/configure">
            <env key="CATALINA_BASE" value="${tomcat.testdir}"/>
            <env key="CONFIGFILE" value="test/config.properties"/>
            <env key="CONFIGDIR" value="config"/>
            <env key="DOCBASE" value="${builddir}/webapp"/>
            <env key="VOMSDIR" value="${builddir}/certs/grid-security/vomsdir"/>
            <env key="HOSTNAME" value="localhost"/>
        </exec>
    </target>
    <target name="test.unconfigure">
        <exec dir="${builddir}" executable="${basedir}/config/unconfigure"/>
    </target>

</project>
